/**
 * @file iterator
 * @brief Forwarding header for <code>jh::iterator</code>.
 *
 * <p>
 * This header provides the canonical include entry for iterator
 * concepts and related utilities.
 * </p>
 *
 * <pre><code>#include &lt;jh/iterator&gt;</code></pre>
 *
 * <p>
 * Internally, this file forwards to <code>jh/conceptual/iterator.h</code>,
 * which defines <code>jh::concepts</code> iterator concepts and traits.
 * Including this header also promotes those conceptual templates into
 * the root namespace <code>jh</code> for backward compatibility across
 * all <strong>1.3.x</strong> releases.
 * </p>
 *
 * <h4>Namespace Mapping (1.3.x)</h4>
 * <ul>
 *   <li><code>jh::concepts</code> — defines all iterator-related concepts and meta utilities.</li>
 *   <li><code>jh</code> — mirrors <code>jh::concepts</code> for backward compatibility.</li>
 *   <li><code>jh::iterator&lt;X&gt;</code> — forward declaration available under <code>jh</code>
 *       to support <code>jh::concepts::iterator_t&lt;X&gt;</code> deduction.</li>
 * </ul>
 *
 * <h4>Deprecation Notice (1.4.0+)</h4>
 * <ul>
 *   <li>This forwarding header will be <strong>removed</strong> in version 1.4.0.</li>
 *   <li><code>jh::concepts</code> symbols will <strong>no longer</strong> be re-exported into <code>jh</code>.</li>
 *   <li>To ensure forward compatibility, update your code as follows:</li>
 *   <ul>
 *     <li>Include the concrete header <code>&lt;jh/conceptual/iterator.h&gt;</code>.</li>
 *     <li>Use all conceptual symbols via the <code>jh::concepts</code> namespace explicitly.</li>
 *   </ul>
 *   <li>Alternatively, include <code>&lt;jh/concepts&gt;</code> (new in 1.4.0) for aggregated concept access.</li>
 * </ul>
 *
 * <p>
 * The current form remains valid and supported throughout the entire
 * <strong>1.3.x</strong> release series.
 * </p>
 */

#pragma once

#include "jh/conceptual/iterator.h"

namespace jh {
    using namespace jh::concepts;
}
